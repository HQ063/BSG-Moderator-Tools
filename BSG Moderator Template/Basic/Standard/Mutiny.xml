<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Mutiny" script:language="StarBasic">REM  *****  BASIC  *****

dim MutinySheet as object
dim MutinyForm as object

const _MutinyCount	= 22

const _MutinyRow		= 11
const _MutinyTypeCol	= 0
const _MutinyDeckCol	= _MutinyTypeCol + 1
const _MutinyHandCol	= _MutinyDeckCol + 1
const _MutinyDiscardCol	= _MutinyHandCol + 1
const _MutinyRemovedCol	= _MutinyDiscardCol + 1
const _MutinyDescCol	= _MutinyRemovedCol + 1

const _MutinyCountsRow		= _MutinyRow	&apos; We always do e.g. _MutinyRow + cardID, and cardID is 1-22. So the counts are 0.
const _MutinyHandCountCol	= 1
const _MutinyHandCountRow	= 1
const _BuriedMutinyCol		= 4
const _BuriedMutinyRow		= 6

sub GetMutinySheet
	if MutinySheet &lt;&gt; NULL then
		exit sub
	end if
	
	MutinySheet	= ThisComponent.Sheets.getByName(&quot;Mutiny&quot;)
	MutinyForm	= MutinySheet.DrawPage.Forms.GetByName(&quot;formMutiny&quot;)
end sub

&apos; Basic function to check if we have the new Zarek on game, and if we need to use necessary steps
sub NecessarySteps as boolean
	dim zarekID as integer
	GetMutinySheet
	
	for zarekID = 1 to PlayerCnt()
		if GetPlayerName(zarekID) = &quot;Tom&quot; and not isRevealed(zarekID) then
			NecessarySteps = true
			exit sub
		end if
	next zarekID
	NecessarySteps = false
end sub

&apos; Returns true if this card is marked as a &quot;Necessary Steps&quot; card (should be sent to Tom Zarek instead of the player)
sub NecessaryStepsCard (cardname as string) as boolean
	dim cardID, numcard as integer
	GetMutinySheet
	
	NecessaryStepsCard = false
	
	for cardID = 1 to _MutinyCount
		if MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string = cardname then
			if InStr(MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string, &quot;Necessary Steps&quot;) then
				NecessaryStepsCard = true
			end if
			exit sub
		end if
	next cardID
end sub

&apos; Clear all &quot;Necessary Steps&quot; text from the other cards of this player (to be used after burying one)
sub ClearNecessarySteps (playername as string)
	GetMutinySheet
	
	for cardID = 1 to _MutinyCount
		if InStr(MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string, playername) then
			MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string = playername
		end if
	next cardID
end sub

sub GetNecessaryStepsCards (playername as string) as string &apos; I know I should return an array, but I&apos;m too lazy for that
	dim cards, cardinfo as string
	GetMutinySheet
	
	cards = &quot;&quot;
	for cardID = 1 to _MutinyCount
		cardinfo = MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string
		if InStr(cardinfo, playername) and InStr(cardinfo, &quot;Necessary Steps&quot;) then
			cards = cards &amp; MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string &amp; chr(13)
		end if
	next cardID
	
	GetNecessaryStepsCards = cards
end sub

sub DrawMutiny (playerID as integer, optional zarek as boolean)
	dim cardID, zarekID, mutinycnt, i as integer
	dim necessary as string
	GetMutinySheet
	
	mutinycnt = 1
	necessary = &quot;&quot;
	
	if IsMissing(zarek) then
		zarek	= true
	end if	
	
	&apos; If we have a Zarek on board, we&apos;ll have to use Necessary Steps
	&apos; Except for Zarek&apos;s initial draw (let&apos;s make it simpler to send an initial hand update
	if zarek and NecessarySteps then
		MsgBox(&quot;Two Mutinies were dealt. Don&apos;t forget to use Necessary Steps.&quot;)
		mutinycnt = 2
		necessary = &quot;Necessary Steps - &quot;
	end if
	
	for i = 1 to mutinycnt
		cardID = 1
		do until MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string = &quot;&quot;
			cardID	= cardID + 1
		loop
		MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string = necessary &amp; GetPlayerName(playerID)
		LogThis(GetPlayerName(playerID) &amp; &quot; draws Mutiny Card: &quot; &amp; MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string)
		&apos; If we&apos;re going to do any post-draw checking, like throwing someone in the Brig, do it here.
		
		&apos; Is the deck empty? If so, move the discards to the deck and shuffle it.
		cardID	= cardID + 1
		if MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string = &quot;&quot; then
			MsgBox &quot;Mutiny deck empty, reshuffling it.&quot;
				
			&apos; Discards are on top of the removed pile.
			do until cardID &gt; _MutinyCount or MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string = &quot;&quot;
				MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string = MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string
				MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string = &quot;&quot;
				cardID	= cardID + 1
			loop
			SetBuriedMutiny(true)
			ShuffleMutinyDeck
		end if
	next i
	
	if GetPlayerName(playerID) = &quot;Lee&quot; then
		MsgBox &quot;Remember that Lee has to discard 2 cards after drawing a Mutiny card&quot;
	end if
	
end sub

sub DrawMutinyButton
	dim playerID as integer
	
	playerID = GetSelected(_ListMutinyPlayers)
	if playerID &lt; 1 then
		MsgBox &quot;Please select a player.&quot;
		exit sub
	end if
	
	if IsRevealed(playerID) and not IsInfiltrating(playerID) then 
		MsgBox GetPlayerName(playerID) &amp; &quot; is a Cylon and cannot draw Mutiny Cards.&quot;
		exit sub
	end if
	
	DrawMutiny(playerID)
	UpdateMutinyCardList	
end sub

function GetMutinyHand (playerID as integer) as variant
	dim cardID, numcards as integer
	dim cardlst() as string
	dim cardname, playername as string
	dim necessary as boolean
	GetMutinySheet
	
	if playerID &lt; 1 then
		GetMutinyHand	= cardlst()
		exit function
	end if
	
	playername	= GetPlayerName(playerID)
	numcards	= 0
	necessary = false
	for cardID = 1 to _MutinyCount
		cardname = MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string
		if InStr(cardname, playername) then
			if InStr(cardname, &quot;Necessary Steps&quot;) then
				necessary = true
			end if
			numcards	= numcards + 1
			redim preserve cardlst(numcards) as string
			cardlst(numcards)	= MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string
		end if
	next cardID
	GetMutinyHand	= cardlst()
	EnableNSDispatcher(necessary)
end function

sub EnableNSDispatcher (state as boolean)
	GetMutinySheet
	MutinyForm.getByName(&quot;btnDispatchNecessary&quot;).EnableVisible = state	
end sub

sub EnableMutinyButtons (state as boolean, optional allcards as boolean)
	GetMutinySheet
	if IsMissing(allcards) then
		allcards = true
	end if
	
	if allcards then
		MutinyForm.getByName(&quot;btnPlayMutiny&quot;).enabled			= state
		MutinyForm.getByName(&quot;btnDiscardMutiny&quot;).enabled		= state
	else
		MutinyForm.getByName(&quot;btnPlayMutiny&quot;).enabled			= false
		MutinyForm.getByName(&quot;btnDiscardMutiny&quot;).enabled		= false
	end if
	MutinyForm.getByName(&quot;btnBuryMutiny&quot;).enabled			= state	
end sub

sub UpdateMutinyCardList
	dim playerID as integer
	GetMutinySheet
	
	MutinyForm.getByName(&quot;lstMutinyCards&quot;).StringItemList	= GetMutinyHand(GetSelected(_ListMutinyPlayers))
	EnableMutinyButtons(false)
end sub

sub SelectedMutinyCardChanged
	dim handID, cardID, playerID as integer
	dim cardtext as string
	GetMutinySheet
	
	handID	= GetSelected(_ListMutinyCards)
	&apos; If we&apos;re using Necessary Steps, we need to take some other things into account
	if NecessarySteps and handID &gt; 0 then
		playerID = GetSelected(_ListMutinyPlayers)
		handID = GetSelected(_ListMutinyCards)
		cardID = GetCardIDFromHandID(playerID, handID)
		cardtext = MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string
		&apos; We have a card marked as Necessary Steps. So we have to only enable the &quot;Bury&quot; button
		if NecessaryStepsCard(cardtext) then
			EnableMutinyButtons(true, false)
		else
			EnableMutinyButtons(handID &gt; 0)
		end if
	else
		EnableMutinyButtons(handID &gt; 0)
	end if
end sub

function GetMutinyHandCount(playerID as integer) as integer
	GetMutinySheet
	GetMutinyHandCount	= MutinySheet.getCellByPosition(_MutinyHandCountCol, _MutinyHandCountRow + playerID).value
end function

function GetCardIDFromHandID (playerID as integer, handID as integer) as integer
	dim cardID, match as integer
	dim player as string
	
	match	= 0
	player	= GetPlayerName(playerID)
	for cardID = 1 to _MutinyCount
		if InStr(MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string, player) then
			match	= match + 1
			if match = handID then
				GetCardIDFromHandID = cardID
				exit function
			end if
		end if
	next cardID	
	GetCardIDFromHandID	= -1
end function

function MutinyCardName (cardID) as string
	dim cardname as string
	GetMutinySheet
	
	MutinyCardName = MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string	
end function

sub PlayMutinyButton
	dim playerID, handID, cardID as integer

	playerID = GetSelected(_ListMutinyPlayers)
	if playerID &lt; 1 then
		MsgBox &quot;Please select a player.&quot;
		exit sub
	end if
		
	handID	= GetSelected(_ListMutinyCards)
	if handID &lt; 1 then
		MsgBox &quot;Please choose a Mutiny Card.&quot;
		exit sub
	end if
	
	cardID	= GetCardIDFromHandID(playerID, handID)
	LogThis(GetPlayerName(playerID) &amp; &quot; plays Mutiny Card: &quot; &amp; MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string)
	if MutinySheet.getCellByPosition(_MutinyTypeCol, _MutinyRow + cardID).string	= &quot;D&quot; then
		DiscardMutiny(cardID)
	elseif MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string = &quot;Controversial Speech&quot; then
		if MsgBox(&quot;Was Controversial Speech successful?&quot;, 4, &quot;Controversial Speech&quot;) &lt;&gt; 6 then
			DiscardMutiny(cardID)
		else
			RemoveMutiny(cardID)
		end if
	else
		RemoveMutiny(cardID)
	endif 
end sub

sub RemoveMutiny (cardID as integer)
	dim bottomrow, col as integer
	dim temp as string
	GetMutinySheet

	&apos; Remove from hand, place in removed column.		
	MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string		= &quot;&quot;
	MutinySheet.getCellByPosition(_MutinyRemovedCol, _MutinyRow + cardID).string	= MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string
	MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string		= &quot;&quot;

	&apos; Move it to the bottom of the deck.
	do until MutinySheet.getCellByPosition(_MutinyRemovedCol, _MutinyRow + cardID + 1).string &lt;&gt; &quot;&quot; or cardID = _MutinyCount
		for col = _MutinyTypeCol to _MutinyDescCol
			temp	= MutinySheet.getCellByPosition(col, _MutinyRow + cardID + 1).string
			MutinySheet.getCellByPosition(col, _MutinyRow + cardID + 1).string	= MutinySheet.getCellByPosition(col, _MutinyRow + cardID).string
			MutinySheet.getCellByPosition(col, _MutinyRow + cardID).string		= temp
		next col
		cardID	= cardID + 1
	loop
	
	LogThis(&quot;Mutiny Card: &quot; &amp; MutinySheet.getCellByPosition(_MutinyRemovedCol, _MutinyRow + cardID).string &amp; &quot; removed from the game.&quot;)
	UpdateMutinyCardList
end sub

sub DiscardMutiny (cardID as integer)
	dim bottomrow, col as integer
	dim temp as string
	GetMutinySheet

	&apos; Remove from hand, place in discard column.		
	MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string		= &quot;&quot;
	MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string	= MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string
	MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string		= &quot;&quot;

	&apos; Move it to the bottom of the deck.
	do until MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID + 1).string = &quot;&quot; or cardID = _MutinyCount
		for col = _MutinyTypeCol to _MutinyDescCol
			temp	= MutinySheet.getCellByPosition(col, _MutinyRow + cardID + 1).string
			MutinySheet.getCellByPosition(col, _MutinyRow + cardID + 1).string	= MutinySheet.getCellByPosition(col, _MutinyRow + cardID).string
			MutinySheet.getCellByPosition(col, _MutinyRow + cardID).string		= temp
		next col
		cardID	= cardID + 1
	loop
	
	LogThis(&quot;Mutiny Card: &quot; &amp; MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string &amp; &quot; discarded.&quot;)
	UpdateMutinyCardList
end sub

sub DiscardAllMutiny (playerID as integer)
	dim cardID as integer
	dim player, hand as string
	GetMutinySheet
	
	cardID = 1
	player	= GetPlayerName(playerID)
	do
		hand	= MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string
		if hand = player then
			DiscardMutiny(cardID)
		else
			cardID	= cardID + 1
		end if
	loop until hand = &quot;&quot;
end sub

sub DiscardMutinyButton
	dim playerID, handID as integer

	playerID = GetSelected(_ListMutinyPlayers)
	if playerID &lt; 1 then
		MsgBox &quot;Please select a player.&quot;
		exit sub
	end if
		
	handID	= GetSelected(_ListMutinyCards)
	if handID &lt; 1 then
		MsgBox &quot;Please choose a Mutiny Card.&quot;
		exit sub
	end if
		
	DiscardMutiny(GetCardIDFromHandID(playerID, handID))
end sub

sub BuryMutiny (cardID as integer)
	dim bottomrow as integer
	GetMutinySheet

	&apos; Remove from hand, but don&apos;t place in discard column.		
	MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string	= &quot;&quot;

	&apos; Move it to the bottom of the deck.
	do until MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID + 1).string = &quot;&quot; or cardID = _MutinyCount
		for col = _MutinyTypeCol to _MutinyDescCol
			temp	= MutinySheet.getCellByPosition(col, _MutinyRow + cardID + 1).string
			MutinySheet.getCellByPosition(col, _MutinyRow + cardID + 1).string	= MutinySheet.getCellByPosition(col, _MutinyRow + cardID).string
			MutinySheet.getCellByPosition(col, _MutinyRow + cardID).string		= temp
		next col
		cardID	= cardID + 1
	loop
	SetBuriedMutiny(false)
	LogThis(&quot;Mutiny Card: &quot; &amp; MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string &amp; &quot; buried.&quot;)
	UpdateMutinyCardList
end sub

sub BuryMutinyButton
	dim playerID, handID, cardID as integer

	playerID = GetSelected(_ListMutinyPlayers)
	if playerID &lt; 1 then
		MsgBox &quot;Please select a player.&quot;
		exit sub
	end if
		
	handID	= GetSelected(_ListMutinyCards)
	if handID &lt; 1 then
		MsgBox &quot;Please choose a Mutiny Card.&quot;
		exit sub
	end if
	
	cardID = GetCardIDFromHandID(playerID, handID)
	if NecessarySteps then
		if NecessaryStepsCard(MutinyCardName(cardID)) then
			&apos; We bury this card then we enable the other one
			ClearNecessarySteps(GetPlayerName(playerID))
		end if
		BuryMutiny(cardID)
	else
		BuryMutiny(cardID)
	end if
end sub

sub Initialize_Mutiny
	dim cardID, playerID as integer
	GetMutinySheet
	
	&apos; Put everything back in the deck.
	SetCurrentTask(&quot;Packing Up Mutiny Deck&quot;)
	for cardID = 1 to _MutinyCount
		MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string	= &quot;&quot;
		if MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string &lt;&gt; &quot;&quot; then
			MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string = MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string 
			MutinySheet.getCellByPosition(_MutinyDiscardCol, _MutinyRow + cardID).string = &quot;&quot;
		elseif MutinySheet.getCellByPosition(_MutinyRemovedCol, _MutinyRow + cardID).string &lt;&gt; &quot;&quot; then
			MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string = MutinySheet.getCellByPosition(_MutinyRemovedCol, _MutinyRow + cardID).string 
			MutinySheet.getCellByPosition(_MutinyRemovedCol, _MutinyRow + cardID).string = &quot;&quot;		
		end if		
	next cardID
	
	&apos; Now shuffle the deck.
	SetCurrentTask(&quot;Shuffling Mutiny Deck&quot;)
	SetBuriedMutiny(true)
	ShuffleMutinyDeck
	
	for playerID = 1 to PlayerCnt()
		if GetPlayerName(playerID) = &quot;Tom&quot; then
			SetCurrentTask(&quot;Dealing Tom Zarek&apos;s Mutiny&quot;)
			MsgBox &quot;Dealing two Mutiny Cards to Tom Zarek, don&apos;t forget to bury one.&quot;
			DrawMutiny(playerID, false)
			DrawMutiny(playerID, false)
		end if
	next playerID
	SetCurrentTask(&quot;Setting Up Mutinies Form&quot;)
	UpdateMutinyCardList
end sub

sub SetBuriedMutiny (reset as boolean)
	GetMutinySheet
	
	if reset then
		MutinySheet.getCellByPosition(_BuriedMutinyCol, _BuriedMutinyRow).value	= 0
	else
		MutinySheet.getCellByPosition(_BuriedMutinyCol, _BuriedMutinyRow).value	= MutinySheet.getCellByPosition(_BuriedMutinyCol, _BuriedMutinyRow).value + 1
	end if
end sub

function GetBuriedMutiny as integer
	GetMutinySheet
	
	GetBuriedMutiny	= MutinySheet.getCellByPosition(_BuriedMutinyCol, _BuriedMutinyRow).value
end function

&apos; The sheet always resets the bury count if it wants a full shuffle.
sub ShuffleMutinyDeck
	dim top, bottom, cardID, swapCard, swapcol as integer
	dim sortOrder(_MutinyCount) as double
	dim tempSort as double
	dim temp as string
	GetMutinySheet
	
	top	= 1
	for cardID = 1 to _MutinyCount
		if MutinySheet.getCellByPosition(_MutinyHandCol, _MutinyRow + cardID).string &lt;&gt; &quot;&quot; then
			top		= cardID + 1
		elseif MutinySheet.getCellByPosition(_MutinyDeckCol, _MutinyRow + cardID).string &lt;&gt; &quot;&quot; then
			sortOrder(cardID)	= rnd()
			bottom	= cardID
		end if
	next cardID
	bottom	= bottom - GetBuriedMutiny
	
	for cardID = top to bottom - 1
		for swapCard = cardID + 1 to bottom
			if sortOrder(cardID) &gt; sortOrder(swapCard) then
				&apos; Swap Orders
				tempSort			= sortOrder(cardID)
				sortOrder(cardID)	= sortOrder(swapCard)
				sortOrder(swapCard)	= tempSort
				
				&apos; Swap contents
				for swapCol = _MutinyTypeCol to _MutinyDescCol
					temp	=  MutinySheet.getCellByPosition(swapCol, _MutinyRow + cardID).string
					MutinySheet.getCellByPosition(swapCol, _MutinyRow + cardID).string		= MutinySheet.getCellByPosition(swapCol, _MutinyRow + swapCard).string
					MutinySheet.getCellByPosition(swapCol, _MutinyRow + swapCard).string	= temp
				next SwapCol
			end if
		next swapCard
	next cardID
end sub

sub ShuffleMutinyButton

end sub

sub ButtonDispatchNecessarySteps
	dim zarekID, playerID as integer
	dim player as string
	GetMutinySheet

	playerID = GetSelected(_ListMutinyPlayers)
	if playerID &lt; 1 then
		MsgBox &quot;Please select a player.&quot;
		exit sub
	end if
	player = GetPlayerName(playerID)

	&apos; This is a special case. We will ALWAYS send the Necessary Steps to Tom. So there we go
	for zarekID = 1 to PlayerCnt()
		if GetPlayerName(zarekID) = &quot;Tom&quot; and not isRevealed(zarekID) then
			DispTargetPlayer(zarekID)
		end if
	next zarekID
	
	DispSubject &quot;Necessary Steps for &quot; &amp; player
	&apos; Clear Body, so we can add things as we need them
	DispBody &quot;&quot;
	DispBodyAdd &quot;[b]Tom[/b], please choose one mutiny to bury and one to keep for &quot; &amp; player &amp; &quot;:&quot; &amp; chr(13)
	DispBodyAdd GetNecessaryStepsCards(player)
	DispatchContents
end sub

</script:module>